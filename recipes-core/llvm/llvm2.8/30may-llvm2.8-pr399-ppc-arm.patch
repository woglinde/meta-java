Index: llvm-2.8/lib/ExecutionEngine/JIT/JIT.cpp
===================================================================
--- llvm-2.8.orig/lib/ExecutionEngine/JIT/JIT.cpp	2010-08-17 18:19:18.000000000 +0200
+++ llvm-2.8/lib/ExecutionEngine/JIT/JIT.cpp	2011-12-19 21:16:21.884288536 +0100
@@ -252,7 +252,12 @@
     MutexGuard guard(Lock);
     JITs.erase(jit);
   }
-  void *getPointerToNamedFunction(const char *Name) const {
+  bool empty() {
+    MutexGuard guard(Lock);
+    return JITs.empty();
+  }
+  void *getPointerToNamedFunction(const char *Name,
+                                  bool AbortOnFailure = true) const {
     MutexGuard guard(Lock);
     assert(JITs.size() != 0 && "No Jit registered");
     //search function in every instance of JIT
@@ -264,7 +269,19 @@
     }
     // The function is not available : fallback on the first created (will
     // search in symbol of the current program/library)
-    return (*JITs.begin())->getPointerToNamedFunction(Name);
+    return (*JITs.begin())->getPointerToNamedFunction(Name, AbortOnFailure);
+  }
+  void *getPointerToGlobalIfAvailable(GlobalValue *V) const {
+    MutexGuard guard(Lock);
+    assert(JITs.size() != 0 && "No Jit registered");
+    //search function in every instance of JIT
+    for (SmallPtrSet<JIT*, 1>::const_iterator Jit = JITs.begin(),
+           end = JITs.end();
+         Jit != end; ++Jit) {
+      if (void *Ptr = (*Jit)->getPointerToGlobalIfAvailable(V))
+	return Ptr;
+    }
+    return 0;
   }
 };
 ManagedStatic<JitPool> AllJits;
@@ -280,6 +297,22 @@
   }
 }
 
+extern "C" {
+  // getPointerToNamedFunctionOrNull - same as the above, but returns
+  // NULL instead of aborting if the function cannot be found.
+  void *getPointerToNamedFunctionOrNull(const char *Name) {
+    return !AllJits->empty() ? AllJits->getPointerToNamedFunction(Name, false) : 0;
+  }
+}
+
+extern "C" {
+  // getPointerToGlobalIfAvailable - same as the above, but for global
+  // variables, and only for those that have been codegened already.
+  void *getPointerToGlobalIfAvailable(GlobalValue *V) {
+    return !AllJits->empty() ? AllJits->getPointerToGlobalIfAvailable(V) : 0;
+  }
+}
+
 JIT::JIT(Module *M, TargetMachine &tm, TargetJITInfo &tji,
          JITMemoryManager *JMM, CodeGenOpt::Level OptLevel, bool GVsWithCode)
   : ExecutionEngine(M), TM(tm), TJI(tji), AllocateGVsWithCode(GVsWithCode),
Index: llvm-2.8/lib/Target/ARM/ARMISelLowering.cpp
===================================================================
--- llvm-2.8.orig/lib/Target/ARM/ARMISelLowering.cpp	2010-09-03 03:35:08.000000000 +0200
+++ llvm-2.8/lib/Target/ARM/ARMISelLowering.cpp	2011-12-19 21:16:21.884288536 +0100
@@ -1119,6 +1119,9 @@
   }
 }
 
+extern "C" void *getPointerToNamedFunctionOrNull(const char *Name);
+extern "C" void *getPointerToGlobalIfAvailable(GlobalValue *Value);
+
 /// LowerCall - Lowering a call into a callseq_start <-
 /// ARMISD:CALL <- callseq_end chain. Also add input and output parameter
 /// nodes.
@@ -1272,6 +1275,26 @@
     InFlag =SDValue();
   }
 
+  EVT PtrVT = DAG.getTargetLoweringInfo().getPointerTy();
+
+  // XXX Work around for http://llvm.org/bugs/show_bug.cgi?id=5201
+  // and http://icedtea.classpath.org/bugzilla/show_bug.cgi?id=399
+  // for Shark.
+  //
+  // If the callee is an ExternalSymbol node, and the symbol can be
+  // resolved to a function pointer, then insert that pointer as a
+  // constant.  This causes the next block of code to fall into the
+  // block that emits an indirect call.  This works around
+  //
+  // This works for Shark because the only kinds of call that Shark
+  // makes that do not already fall into the indirect call block are
+  // calls to pre-existing external functions.
+  if (ExternalSymbolSDNode *S = dyn_cast<ExternalSymbolSDNode>(Callee)) {
+    void *FuncPtr = getPointerToNamedFunctionOrNull(S->getSymbol());
+    if (FuncPtr)
+      Callee = DAG.getConstant((uint64_t) FuncPtr, PtrVT);
+  }
+
   // If the callee is a GlobalAddress/ExternalSymbol node (quite common, every
   // direct call is) turn it into a TargetGlobalAddress/TargetExternalSymbol
   // node so that legalize doesn't hack it.
Index: llvm-2.8/tools/llc/CMakeLists.txt
===================================================================
--- llvm-2.8.orig/tools/llc/CMakeLists.txt	2009-09-03 00:45:31.000000000 +0200
+++ llvm-2.8/tools/llc/CMakeLists.txt	2011-12-19 21:16:21.884288536 +0100
@@ -1,4 +1,4 @@
-set(LLVM_LINK_COMPONENTS ${LLVM_TARGETS_TO_BUILD} bitreader asmparser)
+set(LLVM_LINK_COMPONENTS ${LLVM_TARGETS_TO_BUILD} jit bitreader asmparser)
 
 add_llvm_tool(llc
   llc.cpp
