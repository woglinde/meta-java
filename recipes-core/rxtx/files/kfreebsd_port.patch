Description: Defines FreeBSD for kFreeBSD systems, also makes sure kfreeBSD is set to use FHS
#grep -r -H "__FreeBSD" . -m 1 --exclude=*.patch --exclude-dir=.git | cut -d: -f1 | xargs sed -i s/__FreeBSD__/__FreeBSD_kernel__/
Bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=585089
Author: Scott Howard <showard@debian.org>

Index: rxtx/src/RS485Imp.c
===================================================================
--- rxtx.orig/src/RS485Imp.c	2011-02-23 22:53:43.393378664 -0500
+++ rxtx/src/RS485Imp.c	2011-02-23 22:53:52.663072550 -0500
@@ -120,11 +120,11 @@
 	   threads, because it slows things down.  Go figure. */
 
 	/* POSIX signal handling functions */
-#if !defined(__FreeBSD___)
+#if !defined(__FreeBSD_kernel___)
 	struct sigaction handler;
 	sigaction( SIGIO, NULL, &handler );
 	if( !handler.sa_handler ) signal( SIGIO, SIG_IGN );
-#endif /* !__FreeBSD__ */
+#endif /* !__FreeBSD_kernel__ */
 #if defined(__linux__) 
 	/* Lets let people who upgraded kernels know they may have problems */
 	if (uname (&name) == -1)
@@ -178,7 +178,7 @@
 	ttyset.c_cc[ VMIN ] = 0;
 	ttyset.c_cc[ VTIME ] = 0;
 
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, B9600 ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, B9600 ) < 0 ) goto fail;
@@ -238,7 +238,7 @@
 	if( !translate_data_bits( env, (int *)&(ttyset.c_cflag), dataBits ) ) return; /* dima c_cflag in darwin is unsigned long */
 	if( !translate_stop_bits( env, (int *)&(ttyset.c_cflag), stopBits ) ) return; /* dima c_cflag in darwin is unsigned long */
 	if( !translate_parity( env, (int *)&(ttyset.c_cflag), parity ) ) return;/* dima c_cflag in darwin is unsigned long */
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, cspeed ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, cspeed ) < 0 ) goto fail;
@@ -1290,7 +1290,7 @@
 		return(JNI_FALSE);
 	}
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 	if(!strcmp(name,"tty0")|| !strcmp(name,"ttyd")||
 		!strcmp(name,"ttyq")|| !strcmp(name,"ttym")||
 		!strcmp(name,"ttyf")|| !strcmp(name,"ttyS")||
Index: rxtx/src/RawImp.c
===================================================================
--- rxtx.orig/src/RawImp.c	2011-02-23 22:53:43.413378002 -0500
+++ rxtx/src/RawImp.c	2011-02-23 22:53:52.663072550 -0500
@@ -265,11 +265,11 @@
 	   threads, because it slows things down.  Go figure. */
 
 	/* POSIX signal handling functions */
-#if !defined(__FreeBSD___)
+#if !defined(__FreeBSD_kernel___)
 	struct sigaction handler;
 	sigaction( SIGIO, NULL, &handler );
 	if( !handler.sa_handler ) signal( SIGIO, SIG_IGN );
-#endif /* !__FreeBSD__ */
+#endif /* !__FreeBSD_kernel__ */
 #if defined(__linux__) 
 	/* Lets let people who upgraded kernels know they may have problems */
 	if (uname (&name) == -1)
@@ -307,7 +307,7 @@
 	if( !translate_data_bits( env, (int *)&(ttyset.c_cflag), dataBits ) ) return; /* dima c_flag darwin unsigned long */
 	if( !translate_stop_bits( env, (int *)&(ttyset.c_cflag), stopBits ) ) return; /* dima c_flag darwin unsigned long */
 	if( !translate_parity( env, (int *)&(ttyset.c_cflag), parity ) ) return;/* dima c_flag darwin unsigned long */
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, cspeed ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, cspeed ) < 0 ) goto fail;
@@ -1289,7 +1289,7 @@
 		return(JNI_FALSE);
 	}
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 	if(!strcmp(name,"tty0")|| !strcmp(name,"ttyd")||
 		!strcmp(name,"ttyq")|| !strcmp(name,"ttym")||
 		!strcmp(name,"ttyf")|| !strcmp(name,"ttyS")||
Index: rxtx/src/SerialImp.h
===================================================================
--- rxtx.orig/src/SerialImp.h	2011-02-23 22:53:43.423377671 -0500
+++ rxtx/src/SerialImp.h	2011-02-23 22:55:45.573475048 -0500
@@ -97,7 +97,7 @@
 
 /* glue for unsupported linux speeds see also win32termios.h */
 
-#if !defined(__APPLE__) && !defined(__FreeBSD__) /* dima */
+#if !defined(__APPLE__) && !defined(__FreeBSD_kernel__) /* dima */
 /* this is now handled in SerialImp.c
 #define B14400		1010001
 #define B28800		1010002
@@ -147,7 +147,7 @@
 };
 
 /*  Ports known on the OS */
-#if defined(__linux__)
+#if defined(__linux__) || defined(__FreeBSD_kernel__)
 /*
 	This is a small hack to get mark and space parity working on older systems
 	https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=147533
Index: rxtx/src/SerialImp.c
===================================================================
--- rxtx.orig/src/SerialImp.c	2011-02-23 22:53:43.443377009 -0500
+++ rxtx/src/SerialImp.c	2011-02-23 22:53:52.663072550 -0500
@@ -423,7 +423,7 @@
 	ttyset.c_cc[ VMIN ] = 0;
 	ttyset.c_cc[ VTIME ] = 0;
 
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, B9600 ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, B9600 ) < 0 ) goto fail;
@@ -844,13 +844,13 @@
 		return(1);
 	}
 
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, cspeed ) < 0 )
 	{
 		report( "set_port_params: Cannot Set Speed\n" );
 		return( 1 );
 	}
-#endif  /* __FreeBSD__ */
+#endif  /* __FreeBSD_kernel__ */
 	if( !cspeed )
 	{
 		/* hang up the modem aka drop DTR  */
@@ -4705,7 +4705,7 @@
 		stat(teststring,&mystat);
 #endif /* __sun__ */
 /* XXX the following hoses freebsd when it tries to open the port later on */
-#ifndef __FreeBSD__
+#ifndef __FreeBSD_kernel__
 		if(S_ISCHR(mystat.st_mode)){
 			fd=OPEN(teststring,O_RDONLY|O_NONBLOCK);
 			if (fd>0){
Index: rxtx/src/ParallelImp.c
===================================================================
--- rxtx.orig/src/ParallelImp.c	2011-02-23 22:53:43.463376347 -0500
+++ rxtx/src/ParallelImp.c	2011-02-23 22:53:52.663072550 -0500
@@ -111,7 +111,7 @@
 #if defined(__linux__)
 #	include <linux/lp.h>
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 /* #	include <machine/lpt.h> ? is this changed or wrong */
 #	include <dev/ppbus/lpt.h>
 #endif
@@ -265,7 +265,7 @@
 #if defined(__linux__)
 	return( status & LP_BUSY ? JNI_TRUE : JNI_FALSE );
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 	return( status & EBUSY ? JNI_TRUE : JNI_FALSE );
 #endif
 	return(JNI_FALSE);
@@ -341,7 +341,7 @@
 	ioctl(fd, LPGETSTATUS, &status);
 	return( status & LP_BUSY ? JNI_TRUE : JNI_FALSE );
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 	printf("ParallelImp.c LPGETSTATUS not defined\n");
 	/*
 	return( status & EBUSY ? JNI_TRUE : JNI_FALSE );
Index: rxtx/src/I2CImp.c
===================================================================
--- rxtx.orig/src/I2CImp.c	2011-02-23 22:53:43.483375685 -0500
+++ rxtx/src/I2CImp.c	2011-02-23 22:53:52.663072550 -0500
@@ -120,11 +120,11 @@
 	   threads, because it slows things down.  Go figure. */
 
 	/* POSIX signal handling functions */
-#if !defined(__FreeBSD___)
+#if !defined(__FreeBSD_kernel___)
 	struct sigaction handler;
 	sigaction( SIGIO, NULL, &handler );
 	if( !handler.sa_handler ) signal( SIGIO, SIG_IGN );
-#endif /* !__FreeBSD__ */
+#endif /* !__FreeBSD_kernel__ */
 #if defined(__linux__) 
 	/* Lets let people who upgraded kernels know they may have problems */
 	if (uname (&name) == -1)
@@ -178,7 +178,7 @@
 	ttyset.c_cc[ VMIN ] = 0;
 	ttyset.c_cc[ VTIME ] = 0;
 
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, B9600 ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, B9600 ) < 0 ) goto fail;
@@ -238,7 +238,7 @@
 	if( !translate_data_bits( env, (int *)&(ttyset.c_cflag), dataBits ) ) return; /* dima darwin defime c_cflag as unsigned long */
 	if( !translate_stop_bits( env, (int *)&(ttyset.c_cflag), stopBits ) ) return; /* dima darwin defime c_cflag as unsigned long */
 	if( !translate_parity( env, (int *)&(ttyset.c_cflag), parity ) ) return;/* dima darwin defime c_cflag as unsigned long */
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, cspeed ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, cspeed ) < 0 ) goto fail;
@@ -1220,7 +1220,7 @@
 		return(JNI_FALSE);
 	}
 #endif
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 	if(!strcmp(name,"tty0")|| !strcmp(name,"ttyd")||
 		!strcmp(name,"ttyq")|| !strcmp(name,"ttym")||
 		!strcmp(name,"ttyf")|| !strcmp(name,"ttyS")||
Index: rxtx/src/SerialImp.cpp
===================================================================
--- rxtx.orig/src/SerialImp.cpp	2011-02-23 22:53:43.503375023 -0500
+++ rxtx/src/SerialImp.cpp	2011-02-23 22:53:52.663072550 -0500
@@ -135,11 +135,11 @@
 	   threads, because it slows things down.  Go figure. */
 
 	/* POSIX signal handling functions */
-#if !defined(__FreeBSD___)
+#if !defined(__FreeBSD_kernel___)
 	struct sigaction handler;
 	sigaction( SIGIO, NULL, &handler );
 	if( !handler.sa_handler ) signal( SIGIO, SIG_IGN );
-#endif /* !__FreeBSD__ */
+#endif /* !__FreeBSD_kernel__ */
 #ifdef DEBUG
 	/* Lets let people who upgraded kernels know they may have problems */
 	if (uname (&name) == -1)
Index: rxtx/CNI/SerialImp.h
===================================================================
--- rxtx.orig/CNI/SerialImp.h	2011-02-23 22:53:43.523374359 -0500
+++ rxtx/CNI/SerialImp.h	2011-02-23 22:53:52.663072550 -0500
@@ -97,7 +97,7 @@
 
 /* glue for unsupported linux speeds see also win32termios.h */
 
-#if !defined(__APPLE__) && !defined(__FreeBSD__) /* dima */
+#if !defined(__APPLE__) && !defined(__FreeBSD_kernel__) /* dima */
 /* this is now handled in SerialImp.c
 #define B14400		1010001
 #define B28800		1010002
@@ -165,7 +165,7 @@
 #	define LOCKFILEPREFIX "LK."
 #	define UUCP
 #endif /* __sgi__ || sgi */
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD_kernel__)
 #	define DEVICEDIR "/dev/"
 #	define LOCKDIR "/var/spool/uucp"
 #	define LOCKFILEPREFIX "LK."
@@ -176,7 +176,7 @@
 #	define LOCKDIR "/var/spool/uucp"
 #	define LOCKFILEPREFIX "LK."
 #	define UUCP
-#endif /* __FreeBSD__ */
+#endif /* __FreeBSD_kernel__ */
 #if defined(__NetBSD__)
 #	define DEVICEDIR "/dev/"
 #	define LOCKDIR "/usr/spool/uucp"
Index: rxtx/CNI/SerialImp.c
===================================================================
--- rxtx.orig/CNI/SerialImp.c	2011-02-23 22:53:43.543373697 -0500
+++ rxtx/CNI/SerialImp.c	2011-02-23 22:53:52.663072550 -0500
@@ -382,7 +382,7 @@
 	ttyset.c_cc[ VMIN ] = 0;
 	ttyset.c_cc[ VTIME ] = 0;
 
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, B9600 ) < 0 ) goto fail;
 #else
 	if( cfsetispeed( &ttyset, B9600 ) < 0 ) goto fail;
@@ -686,13 +686,13 @@
 		return(1);
 	}
 
-#ifdef __FreeBSD__
+#ifdef __FreeBSD_kernel__
 	if( cfsetspeed( &ttyset, cspeed ) < 0 )
 	{
 		report( "set_port_params: Cannot Set Speed\n" );
 		return( 1 );
 	}
-#endif  /* __FreeBSD__ */
+#endif  /* __FreeBSD_kernel__ */
 	if( !cspeed )
 	{
 		/* hang up the modem aka drop DTR  */
@@ -4257,7 +4257,7 @@
 		stat(teststring,&mystat);
 #endif /* __sun__ */
 /* XXX the following hoses freebsd when it tries to open the port later on */
-#ifndef __FreeBSD__
+#ifndef __FreeBSD_kernel__
 		if(S_ISCHR(mystat.st_mode)){
 			fd=::OPEN(teststring,O_RDONLY|O_NONBLOCK);
 			if (fd>0){
